{"version":3,"sources":["lifeSlice.ts","store.ts","components/Square.tsx","components/Board.tsx","components/Game.tsx","index.tsx"],"names":["initialState","value","Array","from","length","lifeSlice","createSlice","name","reducers","reset","state","action","payload","alive","y","x","dead","step","forEach","change","randomizer","map","row","rowIdx","col","colIdx","max","Math","floor","random","actions","store","configureStore","reducer","life","mouseDown","document","body","onmousedown","onmouseup","Square","props","square","useSelector","dispatch","useDispatch","handleClick","className","onClick","onMouseOver","marks","label","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","undefined","clearInterval","Board","useState","size","setSize","isPlaying","setPlaying","playTime","setPlayTime","randomFillPercent","setRandomFillPercent","dummyArr","setDummyArr","play","changed","diff","squares","getState","aliveNeighbors","countAliveNeighbors","includes","push","board","total","Box","sx","alignItems","width","display","flexDirection","md","mt","Stack","direction","Typography","variant","gutterBottom","Tooltip","title","Icon","spacing","Button","TextField","type","InputProps","inputProps","min","defaultValue","onChange","e","parseInt","target","endAdornment","InputAdornment","position","mb","Slider","_","val","Grid","container","columns","xs","item","Game","darkTheme","createTheme","palette","mode","ReactDOM","render","ThemeProvider","theme","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.5d614c79.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\nexport interface LifeState {\r\n    value: number[][]\r\n}\r\n\r\nconst initialState: LifeState = {\r\n    value: Array.from({ length: 10 }, () => {\r\n        return Array.from({ length: 10 }, () => 0)\r\n    })\r\n}\r\n\r\ninterface Coord {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport interface CellDiff {\r\n    x: number\r\n    y: number\r\n    state: number\r\n}\r\n\r\nexport const lifeSlice = createSlice({\r\n    name: \"life\",\r\n    initialState,\r\n    reducers: {\r\n        reset: (state, action: PayloadAction<number>) => {\r\n            state.value = Array.from({ length: action.payload }, () => {\r\n                return Array.from({ length: action.payload }, () => 0)\r\n            })\r\n        },\r\n        alive: (state, action: PayloadAction<Coord>) => {\r\n            state.value[action.payload.y][action.payload.x] = 1\r\n        },\r\n        dead: (state, action: PayloadAction<Coord>) => {\r\n            state.value[action.payload.y][action.payload.x] = 0\r\n        },\r\n        step: (state, action: PayloadAction<CellDiff[]>) => {\r\n            action.payload.forEach((change) => {\r\n                state.value[change.y][change.x] = change.state\r\n            })\r\n        },\r\n        randomizer: (state, action: PayloadAction<number>) => {\r\n          state.value = state.value.map((row, rowIdx) => row.map((col, colIdx) => (getRandomInt(101) < action.payload ? 1 : 0)))\r\n        }\r\n    }\r\n})\r\n\r\nfunction getRandomInt(max: number): number {\r\n  return Math.floor(Math.random() * max)\r\n}\r\n\r\n\r\nexport const { reset, alive, dead, step, randomizer } = lifeSlice.actions\r\n\r\nexport default lifeSlice.reducer\r\n","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport { lifeSlice } from \"./lifeSlice\"\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        life: lifeSlice.reducer\r\n    }\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n","import { useSelector, useDispatch } from \"react-redux\"\r\nimport { dead, alive } from \"../lifeSlice\"\r\nimport { RootState } from \"../store\"\r\n\r\ninterface SquareProps {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nlet mouseDown = false\r\n\r\ndocument.body.onmousedown = () => {\r\n    mouseDown = true\r\n}\r\n\r\ndocument.body.onmouseup = () => {\r\n    mouseDown = false\r\n}\r\n\r\nfunction Square(props: SquareProps): JSX.Element {\r\n    const square = useSelector((state: RootState) => state.life.value[props.y][props.x])\r\n    const dispatch = useDispatch()\r\n\r\n    const handleHover = (): void => {\r\n        if (mouseDown) {\r\n            handleClick()\r\n        }\r\n    }\r\n\r\n    const handleClick = (): void => {\r\n        if (square === 1) {\r\n            dispatch(dead({ x: props.x, y: props.y }))\r\n        } else {\r\n            dispatch(alive({ x: props.x, y: props.y }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={square === 1 ? \"square alive\" : \"square\"}\r\n            onClick={handleClick}\r\n            onMouseOver={handleHover}></button>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import { useEffect, useState, useRef } from \"react\"\r\nimport {\r\n    Button,\r\n    Slider,\r\n    TextField,\r\n    Box,\r\n    Stack,\r\n    Grid,\r\n    Typography,\r\n    Tooltip,\r\n    Icon,\r\n    InputAdornment\r\n} from \"@material-ui/core\"\r\nimport HelpIcon from \"@material-ui/icons/Help\"\r\n\r\nimport Square from \"./Square\"\r\nimport { store } from \"../store\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { CellDiff, reset, step, randomizer } from \"../lifeSlice\"\r\n\r\nconst marks = [\r\n    {\r\n        value: 50,\r\n        label: \"50ms\"\r\n    },\r\n    {\r\n        value: 1000,\r\n        label: \"1s\"\r\n    }\r\n]\r\n\r\nfunction Board(): JSX.Element {\r\n    const [size, setSize] = useState(10)\r\n    const [isPlaying, setPlaying] = useState(false)\r\n    const [playTime, setPlayTime] = useState(200)\r\n    const [randomFillPercent, setRandomFillPercent] = useState(50)\r\n    const [dummyArr, setDummyArr] = useState(\r\n        Array.from({ length: size }, () => {\r\n            return 0\r\n        })\r\n    )\r\n    const dispatch = useDispatch()\r\n\r\n    useInterval(\r\n        () => {\r\n            play()\r\n        },\r\n        // Delay in milliseconds or null to stop it\r\n        isPlaying ? playTime : null\r\n    )\r\n\r\n    useEffect(() => {\r\n        setPlaying(false)\r\n        setDummyArr(\r\n            Array.from({ length: size }, () => {\r\n                return 0\r\n            })\r\n        )\r\n        dispatch(reset(size))\r\n    }, [size])\r\n\r\n    const play = (): void => {\r\n        let changed = false\r\n        const diff: CellDiff[] = []\r\n\r\n        const squares = store.getState().life.value\r\n\r\n        squares.forEach((row, rowIdx) => {\r\n            row.forEach((square, colIdx) => {\r\n                const aliveNeighbors = countAliveNeighbors(squares, rowIdx, colIdx)\r\n\r\n                if (square === 1 && [2, 3].includes(aliveNeighbors)) {\r\n                    // Don't do anything here\r\n                } else if (square === 0 && aliveNeighbors === 3) {\r\n                    diff.push({ x: colIdx, y: rowIdx, state: 1 })\r\n                    changed = true\r\n                } else if (squares[rowIdx][colIdx] === 1) {\r\n                    diff.push({ x: colIdx, y: rowIdx, state: 0 })\r\n                    changed = true\r\n                }\r\n            })\r\n        })\r\n\r\n        if (diff.length > 0) {\r\n            dispatch(step(diff))\r\n        }\r\n        if (!changed) {\r\n            setPlaying(false)\r\n        }\r\n    }\r\n\r\n    const countAliveNeighbors = (board: number[][], y: number, x: number): number => {\r\n        let total = 0\r\n        if (x > 0 && y > 0) {\r\n            total += board[y - 1][x - 1]\r\n        }\r\n        if (x < board[y].length - 1 && y > 0) {\r\n            total += board[y - 1][x + 1]\r\n        }\r\n        if (x > 0 && y < board.length - 1) {\r\n            total += board[y + 1][x - 1]\r\n        }\r\n\r\n        if (x < board[y].length - 1 && y < board.length - 1) {\r\n            total += board[y + 1][x + 1]\r\n        }\r\n\r\n        if (x > 0) {\r\n            total += board[y][x - 1]\r\n        }\r\n        if (x < board[y].length - 1) {\r\n            total += board[y][x + 1]\r\n        }\r\n        if (y > 0) {\r\n            total += board[y - 1][x]\r\n        }\r\n\r\n        if (y < board.length - 1) {\r\n            total += board[y + 1][x]\r\n        }\r\n\r\n        return total\r\n    }\r\n\r\n    const clearBoard = (): void => {\r\n        dispatch(reset(size))\r\n    }\r\n\r\n    const fillRandom = (): void => {\r\n        dispatch(randomizer(randomFillPercent))\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ alignItems: \"center\", width: \"100vw\", display: \"flex\", flexDirection: { md: \"column\" } }} mt={7}>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"h3\" gutterBottom>\r\n                    Conway's Game of Life\r\n                </Typography>\r\n                <Tooltip title=\"Click squares to set up a pattern then either press progress to step once or start\">\r\n                    <Icon aria-label=\"Click squares to set up a pattern then either press progress to step once or start\">\r\n                        <HelpIcon />\r\n                    </Icon>\r\n                </Tooltip>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" spacing={2}>\r\n                <Button onClick={play}>Progress</Button>\r\n                <Button onClick={() => setPlaying(true)}>Start</Button>\r\n                <Button onClick={() => setPlaying(false)}>Stop</Button>\r\n                <Button onClick={() => clearBoard()}>Clear</Button>\r\n                <TextField\r\n                    label=\"Board Size\"\r\n                    type=\"number\"\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    defaultValue={size}\r\n                    onChange={(e) => setSize(parseInt(e.target.value))}\r\n                />\r\n            </Stack>\r\n            <Stack direction=\"row\" spacing={2} mt={2}>\r\n                <Button onClick={fillRandom}>Random</Button>\r\n                <TextField\r\n                    label=\"Percentage of squares filled\"\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                        inputProps: { min: 0, max: 100 },\r\n                        endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\r\n                    }}\r\n                    defaultValue={randomFillPercent}\r\n                    onChange={(e) => setRandomFillPercent(parseInt(e.target.value))}\r\n                />\r\n            </Stack>\r\n            <Box width={500} mt={5} mb={5}>\r\n                <Typography>Time Between Moves</Typography>\r\n                <Slider\r\n                    min={50}\r\n                    max={1000}\r\n                    defaultValue={playTime}\r\n                    onChange={(_, val) => setPlayTime(val as number)}\r\n                    marks={marks}></Slider>\r\n            </Box>\r\n            <Grid container id=\"board\" spacing={0} columns={{ xs: size }} sx={{ width: 34 * size }}>\r\n                {dummyArr.map((row, rowIdx) =>\r\n                    dummyArr.map((col, colIdx) => (\r\n                        <Grid item xs={1} key={`${rowIdx}:${colIdx}`}>\r\n                            <Square x={colIdx} y={rowIdx} />\r\n                        </Grid>\r\n                    ))\r\n                )}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport const useInterval = (callback: any, delay: number | null): void => {\r\n    const savedCallback = useRef<any>()\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    }, [callback])\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick(): void {\r\n            if (savedCallback !== undefined) {\r\n                savedCallback.current()\r\n            }\r\n        }\r\n        if (delay !== null) {\r\n            const id = setInterval(tick, delay)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [delay])\r\n}\r\n\r\nexport default Board\r\n\r\n","import Board from \"./Board\"\r\nfunction Game(): JSX.Element {\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import ReactDOM from \"react-dom\"\r\nimport { store } from \"./store\"\r\nimport { Provider } from \"react-redux\"\r\nimport \"./index.css\"\r\nimport Game from \"./components/Game\"\r\n\r\nimport {\r\n    ThemeProvider,\r\n    // unstable_createMuiStrictModeTheme as createMuiTheme,\r\n    createTheme\r\n} from \"@material-ui/core/styles\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\n\r\nconst darkTheme = createTheme({\r\n    palette: {\r\n        mode: \"dark\"\r\n    }\r\n})\r\n\r\n// ========================================\r\nReactDOM.render(\r\n    <ThemeProvider theme={darkTheme}>\r\n        <CssBaseline />\r\n        <Provider store={store}>\r\n            <Game />\r\n        </Provider>\r\n    </ThemeProvider>,\r\n    document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}